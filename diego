#!/bin/bash
name=$(basename -- "$0")
version=""
description="Docker Diego, cross-platform shell"; copyright=""
diegorc=~/.diegorc
diegohome=$HOME/.diego/
diegocache=.cache

brewsrc="https://raw.githubusercontent.com/Homebrew/install/master/install"
icnsrepo="https://raw.githubusercontent.com/PantherJohn/diego/master/logos"

available=false
dcontainer="default"; container=""
# pre-install packages ######
hostreq="brew:cask:osxfuse,sshfs,docker,openssh"
containereq="dnf,yum,apt-get:openssh-server dnf,apt-get:sshfs yum:fuse-sshfs brew:openssh,sshfs"
#############################
options=""
hostnetwork=false
daemon=false
reset=false; reload=false
savestate=true
contextual=false
remount=false
hostname=""

ansi() { echo -e "\e[${1}m${@:2}\e[0m"; }
red() { ansi 31 "$@"; }
error() { red $@ >&2; }
info() { echo -e "$@"; }
strip() { awk -F"[$@]" '{print $2}'; }
exists() { ${executor} hash $@; } >/dev/null 2>&1
sethome() { mkdir $@; cd $@; } >/dev/null 2>&1
lowercase() { for e in $@; do echo $e | tr '[:upper:]' '[:lower:]'; done; }
uppercase() { for e in $@; do echo $(tr '[:lower:]' '[:upper:]' <<< ${e:0:1})${e:1}; done; }
savevars() { for var in "$@"; do printf '%s="%s";' "${var}" "${!var}"; done; }

function usage() {
    [ "${description}" ] && echo "${description}" $([ "${version}" ] && echo ${version})
    [ "${copyright}" ] && echo "(c) copyright ${copyright}"
    echo usage: ${name} 'container [--name container] [-u user]'\
            '[--group group] [--privileged] [-c config] [-r|--reload]'
}

function instinfo() {
    query='docker inspect -f'
    opt="$1"; shift
    case ${opt} in
        id)   ${query} '{{.Id}}' $@ ;;
        name) ${query} '{{.Name}}' $@ | cut -c2- ;;
        running) ${query} '{{.State.Running}}' $@ ;;
        eq)   [ "$1" == "$2" ] || \
              [ "$1" == "$(instinfo id $2)" ] || \
              [ "$2" == "$(instinfo id $1)" ] || \
              [ "$(instinfo id $1)" == "$(instinfo id $2)" ] ;;
        *)    ${query} $@ ;;
    esac
} 2>/dev/null

function checkreq() {
    [ "${cdefault}" ] && cdefault=install
    [ "${pkgman}" ] && {
        exists ${pkgman} || ${executor} source < <(eval ${from})
    };
    [ "${pkgs}" ] && {
        for e in ${pkgs}; do
            IFS=$':' read pkgmans pkglist <<< "$e"
            (
                IFS=$','; for pkgman in ${pkgmans}; do
                    if exists ${pkgman}; then
                        for pkg in ${pkglist}; do
                            IFS=$':' read subset pkgname <<< "${pkg}"
                            [ "${pkgname}" ] || { pkgname="${subset}"; subset=''; }
                            ${executor} "${pkgman}" "${subset}" "${cdefault}" "${pkgname}"
                        done; break
                    fi
                done
            )
        done
    }
}

function dcexec() {
    [ "${container}" ] || return 1
    echo -n "docker exec -i ${container} $@"
}

function searchexec() {
    target="$1"; shift; cmd="$@"
    exists ${target} && { echo ${executor} ${target} ${cmd}; return; }

    searchpath="$(${executor} printenv PATH):${exclude}"
    echo ${executor} $(eval ${executor} find / -type f -name "${target}" -prune \
        $(IFS=$':'; printf '! -path "%q/\*" ' ${searchpath}) -print -quit | head -n1) ${cmd}
} 2>/dev/null

function relicon() {
    iconloc=".volicon"; rm -f "${iconloc}"
    curl -fsL -o "${iconloc}" "${icnsrepo}/$(lowercase "$@").icns"
    echo -n $(realpath "${iconloc}")
}

function sftpmount() {
    [ "${reverse}" ] || reverse=false

    function ismounted() {
        directory="$(${executor} realpath $@)"
        ${executor} mount | grep -q -- "${directory}" >/dev/null 2>&1
    }

    function execute() {
        mode="$1"; print=false; shift; cmd="$@"
        while read -n1 m; do
            case ${m} in
                'p') print=true ;;
                't') ${reverse} || cmd="$(dcexec $@)" ;;
                's') ${reverse} && cmd="$(dcexec $@)" ;;
            esac
        done <<< "${mode}"
        ${print} && echo -n "${cmd}" || eval ${cmd}
    }

    for opts in ${mount_opts}; do
        IFS=$':' read _type_ opts <<< "${opts}"
        case "${_type_}" in
            'host')  ${reverse} || continue ;;
            'guest') ${reverse} && continue ;;
            '') ;;
        esac
        sshfs_opts="${sshfs_opts} $(IFS=$','; printf ' -o%s' ${opts})"
    done

    _targets=""
    for e in "$@"; do
        IFS=':' read _source _target <<< "$e"
        [ "${_target}" ] || _target="${diegohome}/${container}/${_source}"

        ${reverse} || mounts="${mounts} ${_source}:${_target}"
        executor="$(execute pt)" ismounted ${_target} && continue

        execute t mkdir -p "${_target}"
        _targets="${_targets}:${_target}"

        socat exec:"$(execute pt "sshfs \:${_source} ${sshfs_opts} ${_target}")" \
              exec:"$(executor="$(execute ps)" exclude="${_targets:1}" searchexec sftp-server)",nofork,pipes \
              >/dev/null 2>&1 &
    done
} >/dev/null 2>&1

function mountall() {
    mounts=""
    mount_opts=":slave,async_read host:volname="${prettyname}",$(
                [ -f "${oslogo}" ] && printf "volicon="${oslogo}"")"
    sftpmount ${volumes}; reverse=true sftpmount ${rvolumes}
}

currdir="$(pwd)"
sethome ${diegohome}
if ! source ${diegocache} >/dev/null 2>&1; then
    pkgman=brew from="curl -fsSL ${brewsrc}" pkgs="${hostreq}" checkreq
fi

open -a Docker -gj
until docker ps >/dev/null 2>&1; do true; done

while true; do
    case "$1" in
        -c)
            shift; diegorc="$1" ;;
        -d|--daemon) daemon=true ;;
        -u|--user)
            shift; user="$1" ;;
        --group)
            shift; group="$1" ;;
        --privileged)
            privileged="$1" ;;
        -r|--reload) reload=true ;;
        --contextual) contextual=true ;;
        -h|--help) usage; exit 0 ;;
        '') break ;;
        *)  dcontainer="$1" ;;
    esac; shift
done

container=$(instinfo name ${dcontainer})
if [ ! "${container}" ] || ${reload}; then
    set --
    while IFS="" read -r p || [ -n "$p" ]; do
        line="${p%'#'*}"; [ "${line}" ] && eval set ${line}
        keyword="$1"; shift
        case ${keyword} in
            '%%')
                ${available} && break
                for e in "$@"; do
                    case $e in
                        'default') available=true ;;
                        *) IFS=':' read t idname <<< "$e"
                           instinfo eq ${idname} ${dcontainer} && available=true ;;
                    esac
                done ;;
            'shell') pshell="$@" ;;
            'initializer') initializer="$@" ;;
            'image') image="$@" ;;
            'hostname') hostname="$@" ;;
            'usergroup') ;;
            'mount')
                signature="{}"
                for v in "$@"; do
                    IFS=':' read _source _target <<< "$v"
                    _source_="$(echo "${_source}" | strip ${signature})"
                    _target_="$(echo "${_target}" | strip ${signature})"

                    [ "${_source_}" ] && rvolumes="${rvolumes} ${_source_}:${_target_}" \
                                      || volumes="${volumes} $([ "${_target_}" ] && echo "${_source}:${_target_}" || echo "$v")"
                done ;;
            'options') options="$@" ;;
        esac
    done < "${diegorc}"
    remount=true
fi

if [ ! "${container}" ] || {
    ${reset} && {
        container=$(instinfo name ${container})
        ${savestate} && docker commit ${container} ${image}
    } && docker rm -f ${container}
} >/dev/null 2>&1; then
    if ! container=$(docker run --name "${dcontainer}" \
        $([ "${hostname}" ] && echo "-h ${hostname}") \
        -d ${privileged} $(${hostnetwork} && echo '--network host' || echo '-P') \
        ${options} ${image} "${initializer}"); then
        exit 1
    fi
    remount=true
fi >/dev/null 2>&1

if [ "${container}" ]; then
    if ! $(instinfo running ${container}); then
        remount=true
        docker start ${container}
    fi >/dev/null 2>&1

    if ${reload}; then
        sysinfo=('/etc/os-release' '/usr/lib/os-release')
        executor="$(dcexec)" pkgs="${containereq}" checkreq
        eval "$(dcexec cat ${sysinfo[@]})"
        [ "${ID}" ] || ID="$(dcexec uname -s)"

        osname="${ID}"
        prettyname="$(echo ${NAME} | awk '{print $1}')"
        oslogo="$(relicon ${ID})"
        remount=true
    fi

    ${remount} && mountall

    if ${contextual}; then
        for mountpoint in ${mounts}; do
            IFS=':' read _source _target <<< "${mountpoint}"
            if [[ "${currdir}" =~ "${_source}" ]]; then
                workdir="-w ${_target}/${currdir}"
                break
            fi
        done
    fi

    savevars diegorc container pshell \
        mounts osname prettyname oslogo > ${diegocache}

    if ! ${daemon}; then
        docker exec -it ${privileged} ${workdir} ${container} "${pshell}"
    fi
fi
